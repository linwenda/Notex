// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notex.Infrastructure.Data;

#nullable disable

namespace Notex.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220713073926_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Notex.Core.Domain.Comments.ReadModels.CommentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("creator_id");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("entity_type");

                    b.Property<ulong>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("RepliedCommentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("replied_comment_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Notex.Core.Domain.MergeRequests.ReadModels.MergeRequestDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("DestinationNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("destination_note_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modifier_id");

                    b.Property<DateTime?>("ReviewTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("review_time");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("reviewer_id");

                    b.Property<Guid>("SourceNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("source_note_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_merge_requests");

                    b.ToTable("merge_requests", (string)null);
                });

            modelBuilder.Entity("Notex.Core.Domain.Notes.ReadModels.NoteDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("CloneFormId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clone_form_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("creator_id");

                    b.Property<ulong>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modifier_id");

                    b.Property<int>("ReadCount")
                        .HasColumnType("int")
                        .HasColumnName("read_count");

                    b.Property<string>("SerializeTags")
                        .HasColumnType("text")
                        .HasColumnName("serialize_tags");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("space_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.Property<int>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_notes");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("Notex.Core.Domain.Notes.ReadModels.NoteHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("CloneFormId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clone_form_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("comment");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("note_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_note_histories");

                    b.ToTable("note_histories", (string)null);
                });

            modelBuilder.Entity("Notex.Core.Domain.Notes.ReadModels.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Notex.Core.Domain.Spaces.ReadModels.SpaceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("cover");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("creator_id");

                    b.Property<ulong>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modification_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_spaces");

                    b.ToTable("spaces", (string)null);
                });

            modelBuilder.Entity("Notex.Infrastructure.FileProviders.AppFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .HasColumnType("longblob")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_time");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("creator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_app_files");

                    b.ToTable("app_files", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
